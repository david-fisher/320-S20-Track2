{"version":3,"sources":["C:/Users/Caleb/Documents/Programming-Projects/AngularLearning/node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAqX2B,6BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsMtD;;;;0BAGC","file":"platform-browser-dynamic.js","sourcesContent":["/**\n * @license Angular v9.0.2\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getUrlScheme, syntaxError, Identifiers, JitCompiler, ProviderMeta, I18NHtmlParser, CompilerConfig, CompileReflector, ResourceLoader, JitSummaryResolver, SummaryResolver, Lexer, Parser, HtmlParser, TemplateParser, ElementSchemaRegistry, JitEvaluator, DirectiveNormalizer, UrlResolver, CompileMetadataResolver, NgModuleResolver, DirectiveResolver, PipeResolver, StaticSymbolCache, StyleCompiler, ViewCompiler, NgModuleCompiler, DomElementSchemaRegistry } from '@angular/compiler';\nimport { ɵReflectionCapabilities, ɵstringify, ANALYZE_FOR_ENTRY_COMPONENTS, ElementRef, NgModuleRef, ViewContainerRef, ChangeDetectorRef, Renderer2, QueryList, TemplateRef, ɵCodegenComponentFactoryResolver, ComponentFactoryResolver, ComponentFactory, ComponentRef, NgModuleFactory, ɵcmf, ɵmod, ɵmpd, ɵregisterModuleFactory, Injector, ViewEncapsulation, ChangeDetectionStrategy, SecurityContext, LOCALE_ID, TRANSLATIONS_FORMAT, ɵinlineInterpolate, ɵinterpolate, ɵEMPTY_ARRAY, ɵEMPTY_MAP, ɵvid, ɵeld, ɵand, ɵted, ɵdid, ɵprd, ɵqud, ɵpad, ɵpod, ɵppd, ɵpid, ɵnov, ɵncd, ɵunv, ɵcrt, ɵccf, InjectionToken, PACKAGE_ROOT_URL, Compiler, MissingTranslationStrategy, ɵConsole, Optional, Inject, TRANSLATIONS, isDevMode, createPlatformFactory, platformCore, COMPILER_OPTIONS, CompilerFactory, Injectable, PLATFORM_ID, ɵglobal, Version } from '@angular/core';\nimport { ɵPLATFORM_BROWSER_ID } from '@angular/common';\nimport { ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/compiler_reflector.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MODULE_SUFFIX = '';\n/** @type {?} */\nconst builtinExternalReferences = createBuiltinExternalReferencesMap();\nclass JitReflector {\n    constructor() {\n        this.reflectionCapabilities = new ɵReflectionCapabilities();\n    }\n    /**\n     * @param {?} type\n     * @param {?} cmpMetadata\n     * @return {?}\n     */\n    componentModuleUrl(type, cmpMetadata) {\n        /** @type {?} */\n        const moduleId = cmpMetadata.moduleId;\n        if (typeof moduleId === 'string') {\n            /** @type {?} */\n            const scheme = getUrlScheme(moduleId);\n            return scheme ? moduleId : `package:${moduleId}${MODULE_SUFFIX}`;\n        }\n        else if (moduleId !== null && moduleId !== void 0) {\n            throw syntaxError(`moduleId should be a string in \"${ɵstringify(type)}\". See https://goo.gl/wIDDiL for more information.\\n` +\n                `If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.`);\n        }\n        return `./${ɵstringify(type)}`;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    parameters(typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    tryAnnotations(typeOrFunc) { return this.annotations(typeOrFunc); }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    annotations(typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    shallowAnnotations(typeOrFunc) {\n        throw new Error('Not supported in JIT mode');\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    propMetadata(typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    hasLifecycleHook(type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    guards(type) { return this.reflectionCapabilities.guards(type); }\n    /**\n     * @param {?} ref\n     * @return {?}\n     */\n    resolveExternalReference(ref) {\n        return builtinExternalReferences.get(ref) || ref.runtime;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JitReflector.prototype.reflectionCapabilities;\n}\n/**\n * @return {?}\n */\nfunction createBuiltinExternalReferencesMap() {\n    /** @type {?} */\n    const map = new Map();\n    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);\n    map.set(Identifiers.ElementRef, ElementRef);\n    map.set(Identifiers.NgModuleRef, NgModuleRef);\n    map.set(Identifiers.ViewContainerRef, ViewContainerRef);\n    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);\n    map.set(Identifiers.Renderer2, Renderer2);\n    map.set(Identifiers.QueryList, QueryList);\n    map.set(Identifiers.TemplateRef, TemplateRef);\n    map.set(Identifiers.CodegenComponentFactoryResolver, ɵCodegenComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactory, ComponentFactory);\n    map.set(Identifiers.ComponentRef, ComponentRef);\n    map.set(Identifiers.NgModuleFactory, NgModuleFactory);\n    map.set(Identifiers.createModuleFactory, ɵcmf);\n    map.set(Identifiers.moduleDef, ɵmod);\n    map.set(Identifiers.moduleProviderDef, ɵmpd);\n    map.set(Identifiers.RegisterModuleFactoryFn, ɵregisterModuleFactory);\n    map.set(Identifiers.Injector, Injector);\n    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation);\n    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy);\n    map.set(Identifiers.SecurityContext, SecurityContext);\n    map.set(Identifiers.LOCALE_ID, LOCALE_ID);\n    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);\n    map.set(Identifiers.inlineInterpolate, ɵinlineInterpolate);\n    map.set(Identifiers.interpolate, ɵinterpolate);\n    map.set(Identifiers.EMPTY_ARRAY, ɵEMPTY_ARRAY);\n    map.set(Identifiers.EMPTY_MAP, ɵEMPTY_MAP);\n    map.set(Identifiers.viewDef, ɵvid);\n    map.set(Identifiers.elementDef, ɵeld);\n    map.set(Identifiers.anchorDef, ɵand);\n    map.set(Identifiers.textDef, ɵted);\n    map.set(Identifiers.directiveDef, ɵdid);\n    map.set(Identifiers.providerDef, ɵprd);\n    map.set(Identifiers.queryDef, ɵqud);\n    map.set(Identifiers.pureArrayDef, ɵpad);\n    map.set(Identifiers.pureObjectDef, ɵpod);\n    map.set(Identifiers.purePipeDef, ɵppd);\n    map.set(Identifiers.pipeDef, ɵpid);\n    map.set(Identifiers.nodeValue, ɵnov);\n    map.set(Identifiers.ngContentDef, ɵncd);\n    map.set(Identifiers.unwrapValue, ɵunv);\n    map.set(Identifiers.createRendererType2, ɵcrt);\n    map.set(Identifiers.createComponentFactory, ɵccf);\n    return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/compiler_factory.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');\n/**\n * A default provider for {\\@link PACKAGE_ROOT_URL} that maps to '/'.\n * @type {?}\n */\nconst DEFAULT_PACKAGE_URL_PROVIDER = {\n    provide: PACKAGE_ROOT_URL,\n    useValue: '/'\n};\n/** @type {?} */\nconst _NO_RESOURCE_LOADER = {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        throw new Error(`No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);\n    }\n};\n/** @type {?} */\nconst baseHtmlParser = new InjectionToken('HtmlParser');\nclass CompilerImpl {\n    /**\n     * @param {?} injector\n     * @param {?} _metadataResolver\n     * @param {?} templateParser\n     * @param {?} styleCompiler\n     * @param {?} viewCompiler\n     * @param {?} ngModuleCompiler\n     * @param {?} summaryResolver\n     * @param {?} compileReflector\n     * @param {?} jitEvaluator\n     * @param {?} compilerConfig\n     * @param {?} console\n     */\n    constructor(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console) {\n        this._metadataResolver = _metadataResolver;\n        this._delegate = new JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));\n        this.injector = injector;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getExtraNgModuleProviders() {\n        return [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useValue: this }))];\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleSync(moduleType) {\n        return (/** @type {?} */ (this._delegate.compileModuleSync(moduleType)));\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAsync(moduleType) {\n        return (/** @type {?} */ (this._delegate.compileModuleAsync(moduleType)));\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAndAllComponentsSync(moduleType) {\n        /** @type {?} */\n        const result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\n        return {\n            ngModuleFactory: (/** @type {?} */ (result.ngModuleFactory)),\n            componentFactories: (/** @type {?} */ (result.componentFactories)),\n        };\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return this._delegate.compileModuleAndAllComponentsAsync(moduleType)\n            .then((/**\n         * @param {?} result\n         * @return {?}\n         */\n        (result) => ({\n            ngModuleFactory: (/** @type {?} */ (result.ngModuleFactory)),\n            componentFactories: (/** @type {?} */ (result.componentFactories)),\n        })));\n    }\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    loadAotSummaries(summaries) { this._delegate.loadAotSummaries(summaries); }\n    /**\n     * @param {?} ref\n     * @return {?}\n     */\n    hasAotSummary(ref) { return this._delegate.hasAotSummary(ref); }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    getComponentFactory(component) {\n        return (/** @type {?} */ (this._delegate.getComponentFactory(component)));\n    }\n    /**\n     * @return {?}\n     */\n    clearCache() { this._delegate.clearCache(); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { this._delegate.clearCacheFor(type); }\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) {\n        /** @type {?} */\n        const meta = this._metadataResolver.getNgModuleMetadata(moduleType);\n        return meta && meta.id || undefined;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CompilerImpl.prototype._delegate;\n    /** @type {?} */\n    CompilerImpl.prototype.injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    CompilerImpl.prototype._metadataResolver;\n}\nconst ɵ0 = new JitReflector(), ɵ1 = _NO_RESOURCE_LOADER, ɵ2 = /**\n * @param {?} parser\n * @param {?} translations\n * @param {?} format\n * @param {?} config\n * @param {?} console\n * @return {?}\n */\n(parser, translations, format, config, console) => {\n    translations = translations || '';\n    /** @type {?} */\n    const missingTranslation = translations ? (/** @type {?} */ (config.missingTranslation)) : MissingTranslationStrategy.Ignore;\n    return new I18NHtmlParser(parser, translations, format, missingTranslation, console);\n}, ɵ3 = new CompilerConfig();\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n * @type {?}\n */\nconst COMPILER_PROVIDERS__PRE_R3__ = (/** @type {?} */ ([\n    { provide: CompileReflector, useValue: ɵ0 },\n    { provide: ResourceLoader, useValue: ɵ1 },\n    { provide: JitSummaryResolver, deps: [] },\n    { provide: SummaryResolver, useExisting: JitSummaryResolver },\n    { provide: ɵConsole, deps: [] },\n    { provide: Lexer, deps: [] },\n    { provide: Parser, deps: [Lexer] },\n    {\n        provide: baseHtmlParser,\n        useClass: HtmlParser,\n        deps: [],\n    },\n    {\n        provide: I18NHtmlParser,\n        useFactory: (ɵ2),\n        deps: [\n            baseHtmlParser,\n            [new Optional(), new Inject(TRANSLATIONS)],\n            [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\n            [CompilerConfig],\n            [ɵConsole],\n        ]\n    },\n    {\n        provide: HtmlParser,\n        useExisting: I18NHtmlParser,\n    },\n    {\n        provide: TemplateParser, deps: [CompilerConfig, CompileReflector,\n            Parser, ElementSchemaRegistry,\n            I18NHtmlParser, ɵConsole]\n    },\n    { provide: JitEvaluator, useClass: JitEvaluator, deps: [] },\n    { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig] },\n    { provide: CompileMetadataResolver, deps: [CompilerConfig, HtmlParser, NgModuleResolver,\n            DirectiveResolver, PipeResolver,\n            SummaryResolver,\n            ElementSchemaRegistry,\n            DirectiveNormalizer, ɵConsole,\n            [Optional, StaticSymbolCache],\n            CompileReflector,\n            [Optional, ERROR_COLLECTOR_TOKEN]] },\n    DEFAULT_PACKAGE_URL_PROVIDER,\n    { provide: StyleCompiler, deps: [UrlResolver] },\n    { provide: ViewCompiler, deps: [CompileReflector] },\n    { provide: NgModuleCompiler, deps: [CompileReflector] },\n    { provide: CompilerConfig, useValue: ɵ3 },\n    { provide: Compiler, useClass: CompilerImpl, deps: [Injector, CompileMetadataResolver,\n            TemplateParser, StyleCompiler,\n            ViewCompiler, NgModuleCompiler,\n            SummaryResolver, CompileReflector, JitEvaluator, CompilerConfig,\n            ɵConsole] },\n    { provide: DomElementSchemaRegistry, deps: [] },\n    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\n    { provide: UrlResolver, deps: [PACKAGE_ROOT_URL] },\n    { provide: DirectiveResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, deps: [CompileReflector] },\n]));\n/** @type {?} */\nconst COMPILER_PROVIDERS__POST_R3__ = (/** @type {?} */ ([{ provide: Compiler, useFactory: (/**\n         * @return {?}\n         */\n        () => new Compiler()) }]));\n/** @type {?} */\nconst COMPILER_PROVIDERS = COMPILER_PROVIDERS__PRE_R3__;\n/**\n * \\@publicApi\n */\nclass JitCompilerFactory {\n    /* @internal */\n    /**\n     * @param {?} defaultOptions\n     */\n    constructor(defaultOptions) {\n        /** @type {?} */\n        const compilerOptions = {\n            useJit: true,\n            defaultEncapsulation: ViewEncapsulation.Emulated,\n            missingTranslation: MissingTranslationStrategy.Warning,\n        };\n        this._defaultOptions = [compilerOptions, ...defaultOptions];\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    createCompiler(options = []) {\n        /** @type {?} */\n        const opts = _mergeOptions(this._defaultOptions.concat(options));\n        /** @type {?} */\n        const injector = Injector.create([\n            COMPILER_PROVIDERS, {\n                provide: CompilerConfig,\n                useFactory: (/**\n                 * @return {?}\n                 */\n                () => {\n                    return new CompilerConfig({\n                        // let explicit values from the compiler options overwrite options\n                        // from the app providers\n                        useJit: opts.useJit,\n                        jitDevMode: isDevMode(),\n                        // let explicit values from the compiler options overwrite options\n                        // from the app providers\n                        defaultEncapsulation: opts.defaultEncapsulation,\n                        missingTranslation: opts.missingTranslation,\n                        preserveWhitespaces: opts.preserveWhitespaces,\n                    });\n                }),\n                deps: []\n            },\n            (/** @type {?} */ (opts.providers))\n        ]);\n        return injector.get(Compiler);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JitCompilerFactory.prototype._defaultOptions;\n}\n/**\n * @param {?} optionsArr\n * @return {?}\n */\nfunction _mergeOptions(optionsArr) {\n    return {\n        useJit: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.useJit))),\n        defaultEncapsulation: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.defaultEncapsulation))),\n        providers: _mergeArrays(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => (/** @type {?} */ (options.providers))))),\n        missingTranslation: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.missingTranslation))),\n        preserveWhitespaces: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.preserveWhitespaces))),\n    };\n}\n/**\n * @template T\n * @param {?} args\n * @return {?}\n */\nfunction _lastDefined(args) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (args[i] !== undefined) {\n            return args[i];\n        }\n    }\n    return undefined;\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts) {\n    /** @type {?} */\n    const result = [];\n    parts.forEach((/**\n     * @param {?} part\n     * @return {?}\n     */\n    (part) => part && result.push(...part)));\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/platform_core_dynamic.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$1 = {};\n/**\n * A platform that included corePlatform and the compiler.\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\n    { provide: COMPILER_OPTIONS, useValue: ɵ0$1, multi: true },\n    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },\n]);\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ResourceLoaderImpl extends ResourceLoader {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        /** @type {?} */\n        let resolve;\n        /** @type {?} */\n        let reject;\n        /** @type {?} */\n        const promise = new Promise((/**\n         * @param {?} res\n         * @param {?} rej\n         * @return {?}\n         */\n        (res, rej) => {\n            resolve = res;\n            reject = rej;\n        }));\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'text';\n        xhr.onload = (/**\n         * @return {?}\n         */\n        function () {\n            // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n            // by IE10)\n            /** @type {?} */\n            const response = xhr.response || xhr.responseText;\n            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n            /** @type {?} */\n            let status = xhr.status === 1223 ? 204 : xhr.status;\n            // fix status code when it is 0 (0 status is undocumented).\n            // Occurs when accessing file resources or on Android 4.1 stock browser\n            // while retrieving files from application cache.\n            if (status === 0) {\n                status = response ? 200 : 0;\n            }\n            if (200 <= status && status <= 300) {\n                resolve(response);\n            }\n            else {\n                reject(`Failed to load ${url}`);\n            }\n        });\n        xhr.onerror = (/**\n         * @return {?}\n         */\n        function () { reject(`Failed to load ${url}`); });\n        xhr.send();\n        return promise;\n    }\n}\nResourceLoaderImpl.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/platform_providers.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$2 = { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] }, ɵ1$1 = ɵPLATFORM_BROWSER_ID;\n/**\n * \\@publicApi\n * @type {?}\n */\nconst INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [\n    ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,\n    {\n        provide: COMPILER_OPTIONS,\n        useValue: ɵ0$2,\n        multi: true\n    },\n    { provide: PLATFORM_ID, useValue: ɵ1$1 },\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/resource_loader/resource_loader_cache.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n *\n * \\@publicApi\n */\nclass CachedResourceLoader extends ResourceLoader {\n    constructor() {\n        super();\n        this._cache = ((/** @type {?} */ (ɵglobal))).$templateCache;\n        if (this._cache == null) {\n            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n        }\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        if (this._cache.hasOwnProperty(url)) {\n            return Promise.resolve(this._cache[url]);\n        }\n        else {\n            return (/** @type {?} */ (Promise.reject('CachedResourceLoader: Did not find cached template for ' + url)));\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CachedResourceLoader.prototype._cache;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/private_export.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/version.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('9.0.2');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/src/platform-browser-dynamic.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst RESOURCE_CACHE_PROVIDER = [{ provide: ResourceLoader, useClass: CachedResourceLoader, deps: [] }];\n/**\n * \\@publicApi\n * @type {?}\n */\nconst platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { JitCompilerFactory, RESOURCE_CACHE_PROVIDER, VERSION, platformBrowserDynamic, COMPILER_PROVIDERS__POST_R3__ as ɵCOMPILER_PROVIDERS__POST_R3__, CompilerImpl as ɵCompilerImpl, INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, ResourceLoaderImpl as ɵResourceLoaderImpl, CachedResourceLoader as ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a, platformCoreDynamic as ɵplatformCoreDynamic };\n"]}